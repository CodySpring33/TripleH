/*
Jordan Driscoll
May 23, 2019
Creates the string which follows the pendulum
*/
class PendulumString : ZilchComponent
{
  
  [Property]
  var Ball : CogPath = null;  
  

  //How much higher the string's center is above the ball
 
  //Ball X Pos
  var BallStartX : Real = 0; 
  //Ball Y Pos 
  var BallStartY: Real = 0; 

  //The Length of the string
  [Property]
  var Length : Real = 10;
 

  function Initialize(init : CogInitializer)
  {

    //The Position of the ball
    this.BallStartX = this.Ball.Pendulum.StartingX;
    this.BallStartY = this.Ball.Pendulum.StartingY; 
  
 
    
    

    //Sets the scale of the object
    this.Owner.Transform.Scale = Real3(0.0293657, this.Length / 10, 1); 
    //Sets the Position of the object
    this.Owner.Transform.Translation = Real3(this.BallStartX, this.BallStartY, -2);
   
    
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
  }

  function OnLogicUpdate(event : UpdateEvent)
  {
    

    
    //this.ConnectPos = ballCurrentPos - this.Length; 
    //Adjacent Value || X Value
    var a =  this.Ball.Transform.Translation.X - this.Owner.Transform.Translation.X; 
    //Opposite Value
    var b =  this.Ball.Transform.Translation.Y - this.Owner.Transform.Translation.Y; 
    //Hypotenuse Value  || Angle which it is put at 
    var c = Math.ATan2(b, a);


    //this sets it's angle
    this.Owner.Transform.SetEulerAnglesXYZ(0, 0, c + 3.14/2);
    //Subtract pendulum's position from the ball's position & use that as angle
  }
}
