/*
Yuval Talby
*/

class DebugBall : ZilchComponent
{
  var DeathTimer : Real = 0;
  var BoostTimer : Real = 0;
  var AnimeTimer : Real = 0.35;
  //called AnimeTimer strictly for character length consistency
  
  [Property]
  var GracePeriod : Real = 1;
  
  //prevents land sound from playing too often
  var LandDebugGracePeriod : Real = 0.25;
  
  var TimeBoy : Cog = null;
  var Brush : Cog = null;
  var VisiblePlayer : Cog = null;
  
  //multiplied when recovering
  var Boost : Real = 1;
  
  var MyBoostParticles : Cog = null;
  
  [Property]
  var BoostDuration : Real = 2;
  
  var Dying : Boolean = false;
  
  //to see whether you changed positions, used for recovery
  var LastFrameXVelocities : Real2 = Real2(0,0);
  
  var Dead : Boolean = false;
  
  var ThrustStrength : Real = 50;
  var ThrustStrengthM : Real = 1;
  
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
    Zero.Connect(this.Owner, Events.CollisionEnded, this.OnCollisionEnded);
    this.TimeBoy = this.Space.FindObjectByName("Time");
    this.Brush = this.Space.FindObjectByName("Brush");
    foreach(var child in this.Owner.Children)
    {
      if(child.Name == "VisiblePlayer")
        this.VisiblePlayer = child;
    }
    Console.WriteLine(this.Space.SoundSpace);
  }

  function OnCollisionEnded(event : CollisionEvent)
  {
    //if(this.Owner.Collider.Contacts.IsEmpty) 
      //this.Snap();
      
    this.LandDebugGracePeriod = 0.25;
    
  }
  
  function Snap2()
  {
    
  }
  
  //this isn't used
  function Snap()
  {
    var min = -1.0;
    var minDex = -1;
    var minDexL = -1; //min index for lines
    var drawIndex = -1;
    var lineIndex = -1;
    var currentDrawer = null;
    for(var i = 0; i < this.Brush.Draw.MyDrawings.Capacity - 1; ++i)
    {
      var myDistance = Math.Distance(this.Owner.Transform.Translation.XY, this.Brush.Draw.MyDrawings[i].Transform.Translation.XY);
      if((myDistance < min || min < 0) && this.Brush.Draw.MyDrawings[i].DrawLines.MyLines[0] != null)
      {
        min = myDistance;
        minDex = i;
      }
    }    
    
    min = -1.0;
    var myLines = this.Brush.Draw.MyDrawings[minDex].DrawLines.MyLines;
    for(var i = 0; i < myLines.Capacity; ++i)
    {
      
      Console.WriteLine("`i` of `myLines.Capacity - 1`");
      if(myLines[i] != null)
      {
        Console.WriteLine(myLines[i]);
      }
      /*
      if(myLines[i+1] != null)
      {
        
        this.Owner.RigidBody.Velocity = Real3(Math.Cos(myLines[i+1].Transform.EulerAngles.Z), Math.Sin(myLines[i+1].Transform.EulerAngles.Z), 0);
        //this.Owner.RigidBody.Velocity = Real3(0,5, 0);
      }
      */
    }
  }

  function OnCollisionStarted(event : CollisionEvent)
  {
    
    if(event.OtherObject.Name.Contains("Block") && this.LandDebugGracePeriod < 0)
    {
      this.Owner.SoundEmitter.Volume = 1;
      this.Owner.SoundEmitter.PlayCue(SoundCue.HIsabellaSoundPlayerLand);
      Console.WriteLine("CHECK `event.OtherObject.Name`");
    }
    //this isn't needed anymore    
    //var acceptable = false; // shift up a bit when you're both colliding with a line for the first time and is currently in collision with building
    //if(event.OtherObject.Name == "Paint")
    //{
    //  foreach(var collidee in this.Owner.Collider.Contacts)
    //  {
    //    if(collidee.OtherObject.Name.Contains("Block"))
    //    {
    //      acceptable = true;
    //    }
    //  }
    //  //if(acceptable) // asking for consent
    //    //this.Owner.Transform.Translation += Real3(0,0.25,0);
    //}
  }

  function OnLogicUpdate(event : UpdateEvent)
  {
    
    //basic velocity controls
    if(Zero.Keyboard.KeyIsDown(Keys.W))
      this.Owner.RigidBody.Velocity += Real3(0,20,0) * event.Dt;
    if(Zero.Keyboard.KeyIsDown(Keys.A))
      this.Owner.RigidBody.Velocity += Real3(-20,0,0) * event.Dt;
    if(Zero.Keyboard.KeyIsDown(Keys.D))
      this.Owner.RigidBody.Velocity += Real3(20,0,0) * event.Dt;  
      
      
    if(Zero.Keyboard.KeyIsDown(Keys.Q))
      this.Owner.RigidBody.AngularVelocity += Real3(0,0,100) * event.Dt;  
    if(Zero.Keyboard.KeyIsDown(Keys.E))
      this.Owner.RigidBody.AngularVelocity += Real3(0,0,-100) * event.Dt;
      
    /***************************************************/  
    if(this.Owner.RigidBody.Velocity.X <= 0)
    {
      this.DeathTimer += event.Dt;
      //Console.WriteLine(this.DeathTimer);
      //if(this.DeathTimer > this.GracePeriod)
        //this.Dying = true; //Critical line, decides whether going backwards kills the player. doesn't seem necessary for now
    }
    else if(this.DeathTimer > 0)
      this.DeathTimer -= event.Dt;
    
    if(this.Owner.RigidBody.Velocity.X > 5 && this.LastFrameXVelocities.X < 0 && this.LastFrameXVelocities.Y <= 0 && false) //remove last thing to enable
    {
      this.Boost = 2;
      //this.MyBoostParticles = this.Space.CreateAtPosition(Archetype.Vroom, this.Owner.Transform.Translation);
      Console.WriteLine("RECOVERY DETECTED");
    }
    
    //Console.WriteLine(this.LastFrameXVelocities);
    //Console.WriteLine(this.Owner.RigidBody.Velocity.X);
    
    if(this.Boost != 1)
    {
      this.BoostTimer += event.Dt;
      if(this.BoostTimer > this.BoostDuration)
      {
        Console.WriteLine("it works kinda");
        this.BoostTimer = 0;
        this.MyBoostParticles.Destroy();
        this.Boost = 1;
      }
    }
    
    //Console.WriteLine(this.Boost);
    /***************************************************/ 
    
    if(this.Dying)
    {
      this.Owner.Sprite.VertexColor = Math.Lerp(this.Owner.Sprite.VertexColor, Real4(this.Owner.Sprite.VertexColor.XYZ, 0),event.Dt * 10);
      this.VisiblePlayer.Sprite.VertexColor = this.Owner.Sprite.VertexColor;
      this.Owner.RigidBody.Velocity = Math.Lerp(this.Owner.RigidBody.Velocity, Real3(0,this.Owner.RigidBody.Velocity.Y,0), event.Dt * 2);
      if(this.Owner.Sprite.VertexColor.W < 0.05)
      {
        this.Dead = true;
      }
    }
    
    if(this.Dead)
    {
      this.Owner.Transform.Translation += Real3(0,0,10);
    }
    this.LastFrameXVelocities.Y = this.LastFrameXVelocities.X;
    this.LastFrameXVelocities.X = this.Owner.RigidBody.Velocity.X;
    
    this.ThrustStrength = 50 + Math.Pow(this.TimeBoy.TimerScript.Timer / 10, 0.5); //scales with three squarters power
    this.ThrustStrength *= this.ThrustStrengthM;
      
    foreach(var contact in this.Owner.Collider.Contacts)
    {
      if(contact.OtherObject.Name == "Paint" || contact.OtherObject.Name.Contains("Block"))
      {
        var thrustDirection = contact.OtherObject.Transform.EulerAngles.Z;
        this.Owner.RigidBody.Velocity = Real3(event.Dt * Math.Cos(thrustDirection) * this.ThrustStrength,event.Dt * Math.Sin(thrustDirection) * this.ThrustStrength * this.Boost,0) * 40;
        
        //seperate thing, for animation
        
        this.AnimeTimer = 0;
      }
      else if(this.AnimeTimer < 0.35)
        this.AnimeTimer += event.Dt;
        
    }
    
    //doesn't matter if this goes past 0
    this.LandDebugGracePeriod -= event.Dt;
    
    if(this.Owner.Collider.Contacts.IsEmpty && this.AnimeTimer < 0.35)
      this.AnimeTimer += event.Dt;
    
        
    if(this.AnimeTimer >= 0.35)
    { 
      //Console.WriteLine("moving to fall");
      this.VisiblePlayer.Sprite.SpriteSource = SpriteSource.Falling;
    } 
    else if(this.VisiblePlayer.Sprite.SpriteSource == SpriteSource.Falling)
    {
      Console.WriteLine(this.VisiblePlayer.Sprite.SpriteSource.Name);
      this.VisiblePlayer.Sprite.SpriteSource = SpriteSource.Run_0_0; 
    }
    
    
    /****END****/
    
    /*  
    //vertical and horizontal looping, teleporting back once out of screen  
    if(this.Owner.Transform.Translation.X > 18.5 && this.Owner.Parent == null)
      this.Owner.Transform.Translation += Real3(-39,0,0);
      
    if(this.Owner.Transform.Translation.X < -18.5 && this.Owner.Parent == null)
      this.Owner.Transform.Translation += Real3(39,0,0);  
      
    if(this.Owner.Transform.Translation.Y > 12 && this.Owner.Parent == null)
      this.Owner.Transform.Translation += Real3(0,-23,0);
      
    if(this.Owner.Transform.Translation.Y < -12 && this.Owner.Parent == null)
      this.Owner.Transform.Translation += Real3(0,23,0);
      
    */
    /*
    if(this.Owner.Transform.Translation.Y < -25)
    {
      this.Owner.RigidBody.Velocity = Real3(this.Owner.RigidBody.Velocity.X, 5, 0);
    } 
    */ 
  }
}
