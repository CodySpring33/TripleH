class DrawLines : ZilchComponent
{
  [Dependency]
  var Transform : Transform = null;
  var Camera : Cog = null;
  var MyLines : Array[Cog] = Array[Cog](1){};
  var LineIndex : Integer = 0;
  var Active : Boolean = true;
  var Brush : Cog = null;
  var Rand : Random = Random();
  [Property]
  var Precision : Real = 1;
  
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    this.Camera = this.Space.FindObjectByName("GameCamera");
    this.Brush = this.Space.FindObjectByName("Brush");
    this.MyLines[this.LineIndex] = this.Space.CreateAtPosition(Archetype.Paint, this.Brush.Transform.Translation);
    this.MyLines[this.LineIndex].AttachTo(this.Owner);
    //randomize color if color mode is on
    if(this.Brush.Draw.DoColor)
          this.MyLines[this.LineIndex].Sprite.VertexColor = Real4(this.Rand.Range(0,1),this.Rand.Range(0,1),this.Rand.Range(0,1),1);
  }

  function OnLogicUpdate(event : UpdateEvent)
  { 
    if(!Zero.Mouse.IsButtonDown(MouseButtons.Left))
      this.Active = false;
      
    if(this.Active)
    {    
      var mousePosition = this.Camera.CameraViewport.ScreenToWorldZPlane(Zero.Mouse.ClientPosition, 0);
      var brushPosition = this.Brush.Transform.Translation;
      
      var currentLine = this.MyLines[this.LineIndex];
      //vector between line and mouse, used to find angle to point at
      var deltaVector = currentLine.Transform.WorldTranslation - brushPosition;
      //determine angle
      var currentLineAngle = -Math.ATan2(deltaVector.X, deltaVector.Y) - Math.Pi / 2;
      //used to determine length of line
      var currentLineDistMouse = Math.Distance(brushPosition, currentLine.Transform.WorldTranslation);
      currentLine.Transform.SetEulerAnglesXYZ(0,0,currentLineAngle);
      currentLine.Transform.Scale = Real3(currentLineDistMouse * 129, currentLine.Transform.Scale.YZ);
      //Console.WriteLine(this.Brush.Draw.Color);
      
        
      //starting a new line when the stated length is reached, as to chain them together
      if(currentLineDistMouse > this.Precision)
      {
        //instruction to access next line
        this.LineIndex += 1;
        
        //make another line and attach it
        this.MyLines.Add(this.Space.CreateAtPosition(Archetype.Paint, brushPosition));
        this.MyLines[this.LineIndex].AttachTo(this.Owner);
        //randomize color if color mode is on
        if(this.Brush.Draw.DoColor)
          this.MyLines[this.LineIndex].Sprite.VertexColor = Real4(this.Rand.Range(0,1),this.Rand.Range(0,1),this.Rand.Range(0,1),1);
      }
    }
  }
}
