//////////////////////////
//Name: John Richardson
//Date: 5/22/19
//Brief: Menu Script that Allows Sprite Compatibility instead
//////////////////////////



class MenuScriptScript : ZilchComponent
{
  var MousePosition : Real3;
  var Camera : Cog = null;
  //saves original positions of the object
  var OriginalPositionY : Real = 0;
  var OriginalPositionX : Real = 0;
  var UpOne : Real = 0;
  [Property]
  //Sets the Level the Object Switches Too
  var NextLevel : Level = null;
  //If True then Switch Level
  var SwitchLevel : Boolean = false;
  //Timer for Fade in Effect
  var Timer: Real = 0;
  var Delay : Real = 1;
  [Property]
  //Sets the ClickBox for the X
  var XBorder : Real = 4;
  [Property]
  //sets the ClickBox for the Y
  var YBorder : Real = 2;
  
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    Zero.Connect(this.Space, Events.MouseDown, this.OnMouseDown);
    Zero.Connect(this.Space, Events.MouseUp, this.OnMouseUp);
    //Finds the Game Camera
    this.Camera = this.Space.FindObjectByName("GameCamera");
    //Staves the Original Position of the Object
    this.OriginalPositionY = this.Owner.Transform.Translation.Y;
    this.OriginalPositionX = this.Owner.Transform.Translation.X;
    //Sets the Shift of the Object
    this.UpOne = this.Owner.Transform.Translation.Y + 1;
  }

  function OnMouseUp(event : ViewportMouseEvent)
  {
    //If curser is within range when mouse goes up then switch level if SwitchLevel is true
    this.Owner.Transform.Translation = Real3(0, this.OriginalPositionY, 0);
    if(this.MousePosition.Y < this.OriginalPositionY + this.YBorder && this.MousePosition.X < this.OriginalPositionX + this.XBorder){
      if(this.MousePosition.Y > this.OriginalPositionY - this.YBorder - 1 && this.MousePosition.X > this.OriginalPositionX - this.XBorder){
          if(this.SwitchLevel == true){
            this.Space.LoadLevel(this.NextLevel);
          }
      }
    }
    
    
  }

  function OnMouseDown(event : ViewportMouseEvent)
  {
    //If Curser is within range and mouse goes down then set SwitchLevel to True when NextLevel is not null
    if(this.MousePosition.Y < this.OriginalPositionY + this.YBorder && this.MousePosition.X < this.OriginalPositionX + this.XBorder){
      if(this.MousePosition.Y > this.OriginalPositionY - this.YBorder - 1 && this.MousePosition.X > this.OriginalPositionX - this.XBorder){
        this.Owner.Transform.Translation = Real3(this.OriginalPositionX, this.UpOne, 0);
          if(this.NextLevel != null){
          this.SwitchLevel = true;
          }
      }
    }

  }

  function OnLogicUpdate(event : UpdateEvent)
  {
    //Increases the Owner's Opacity based upon the Time
    if(this.Timer <= this.Delay){
      this.Timer += event.Dt;
      this.Owner.Sprite.VertexColor = Real4(this.Owner.Sprite.VertexColor.XYZ, this.Timer);
    }
    //Finds the Position of the Curser in Coordinates instead of Pixels
  this.MousePosition = this.Camera.CameraViewport.ScreenToWorldZPlane(Zero.Mouse.ClientPosition, 0);
    //Moves the Object up One if the curser hovers over the Object
    if(this.MousePosition.Y < this.OriginalPositionY + this.YBorder && this.MousePosition.X < this.OriginalPositionX + this.XBorder){
      if(this.MousePosition.Y > this.OriginalPositionY - this.YBorder - 1 && this.MousePosition.X > this.OriginalPositionX - this.XBorder){
        this.Owner.Sprite.VertexColor = Real4(this.Owner.Sprite.VertexColor.XYZ, this.Timer / 2);
      }
      else{
        this.Owner.Transform.Translation = Real3(this.OriginalPositionX, this.OriginalPositionY, 0);
        this.Owner.Sprite.VertexColor = Real4(this.Owner.Sprite.VertexColor.XYZ, this.Timer);
      }
    }
    else{
      this.Owner.Transform.Translation = Real3(this.OriginalPositionX, this.OriginalPositionY, 0);
      this.Owner.Sprite.VertexColor = Real4(this.Owner.Sprite.VertexColor.XYZ, this.Timer);
    }
  }
}